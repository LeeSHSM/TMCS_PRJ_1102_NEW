DB구조
	- Matrix in/out - port, channelname, channeltype, routeno
	- Matrix View - 

클래스 기본 구조
	- Properties / 초기화 / Public / Private / Event(Private)(구독 / 찐 이벤트 순..) / Utility / Event(delegate...) 구조로 일단 정리하자 보기 편하네
	변경 : 기능별로 나누되 해당기능 안에서 퍼블릭, 프라이빗, 이벤트... 순으로 코드정리(23.11.15)

	- 각 항목안에서도 연관있는것들끼리, 메서드의 흐름대로 작성하자
	- Properties 는 해당 클래스 전역해서 사용하는 변수만 넣고, 각 메서드에 임시로 필요한 전역변수는 해당 흐름의 메서드 최상단에 따로 선언
	

23.11.05
	- MioFrame 추가, 삭제, 크기조절, 드래그앤 드랍(MFrame-> MioFrame) 로직 추가
	- 

23.11.18...
	- 컴포넌트들을... 새로생성할수도 있지만, 생성된걸 가져올수도 있다는걸 생각하자.. 저장개념
	- 카메라 같은 고정 컴포넌트들은 객체의 위치까지 저장할 필요가 있을까? 추후에 사용자단에서 위치 및 크기를 변경할 일이 있을까????????
	- mioFrame은 동적으로 생성,삭제 할수있어야 함...
	- 하지만 카메라, mFrame, dlpFrame 들은?? 일단 기능은 만들어둬야할까?
	- 슬슬 대대적으로 한번 싹 갈아엎어야할때가 온듯하다
	- AMX, Extron, Crestron 등의 api 서버역할 할 장비는... 들어온 메세지를 그대로 전달하는 역할로만 사용하자(당분간은.. 나중에 심도있게 공부하면 그에맞춰 수정)
	- 컴포넌트들을 추가할때 기본 원칙은 추후 개발시 드래그앤 드랍으로 유저컨트롤을 메인폼자체에 생성하고, 해당 폼을 로드시 폼로드 등 이벤트 발생시켜서 메인 프레젠터에서 각각에 맞는 모델프레젠터를 참조할수있게 해야겠지?

	- mFrame 에서 드래그 시작 후 드래그 종료시 같은 matrix에 끝날경우는 matrix자체적으로 처리하되, 같은 matrix에서 끝이나지 않을경우는 matrix외부로 드래그엔드 이벤트 발생시키고
	  메인 프레젠터에서는 이를 마우스 위치와 충돌로직을 이용해서 처리하자
	- 오늘은 matrix부터 다시 수정해보자
